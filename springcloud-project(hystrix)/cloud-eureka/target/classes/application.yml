server:
  port: 8761
eureka:
  instance:
    hostname: eureka-server-${server.port}
  client:
    fetch-registry: false
    register-with-eureka: false
    service-url:
      defaultZone: http://192.168.1.106:${server.port}/eureka
  server:
    wait-time-in-ms-when-sync-empty: 0
    enable-self-preservation: false


spring:
  application:
    name:  eureka-server
  security:
    user:
      name: admin
      password: admin


#常见问题
#  1.为什么服务下线了，eureka server接口返回的信息还会存在
#     A:eureka server并不是强一致性，所以registry中会存在过期的实例信息，存在以下原因；
#       应用异常挂掉，没有在挂掉之前告诉eureka server要下线该服务，这就需要eureka server的EvictionTask去剔除。
#       --解决方案：调整EvictionTask的调度频率 eureka.server.eviction-interval-timer-in-ms: 5000 默认60s
#       应用实例下线时告诉eureka server，但是server端的rest api有response cache，因此需要缓存更新才能更新。
#       --解决方案：考虑关闭缓存 eureka.server.use-read-only-response-cache: false 或者调整缓存时间response-cache-auto-expiration-in-seconds: 60 默认180s
#       eureka server引入了自我保护模式，导致registry的信息不会被剔除
#       --解决方案：不建议关闭生产环境自我保护模式
#
#  2.为什么服务上线了，eureka server不能及时获取
#     -- 解决方案：测试环境适当提高client端拉取server注册信息的频率 registry-fetch-interval-seconds: 5 默认30s
#
#  3.为什么有时候会出现
#    EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE
#    说明：实际生产中经常因为网络问题造成实例与eureka server的心跳不能如约保持，单服务本深是健康的，若此时剔除实例会造成误判，若是大范围的可能导致大部分服务被剔除。eureka为了解决这个问题引入了self
#    preservation机制，近一分钟接收到的续约次数小于阈值，则关闭租约失效剔除，禁止定时任务剔除是小的实例，从而保护注册信息。
#    --解决方案： eureka.server.renewal-percent-threshold: 0.49 默认0.85 每分钟接收到续约的阈值
#                eureka.instance.lease-renewal-interval-in-seconds: 10 默认30s发送心跳的时间间隔
